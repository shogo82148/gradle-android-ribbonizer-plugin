/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.shogo82148.ribbonizer.plugin

import com.android.build.api.variant.ApplicationAndroidComponentsExtension
import com.android.build.api.variant.ApplicationVariantBuilder
import com.shogo82148.ribbonizer.FilterBuilder
import com.shogo82148.ribbonizer.GreenRibbonBuilder
import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.tasks.TaskProvider
import java.io.File
import java.util.*

class RibbonizerPlugin: Plugin<Project> {
    override fun apply(project: Project) {
        // add RibbonizerExtension
        project.extensions.add(RibbonizerExtension.NAME, RibbonizerExtension::class.java)

        // add Robbonize Tasks
        val androidComponents = project.extensions.findByType(ApplicationAndroidComponentsExtension::class.java)
            ?: throw Exception("Not an Android application; you forget `apply plugin: 'com.android.application`?")
        val extension = project.extensions.findByType(RibbonizerExtension::class.java)!!

        val tasks = mutableListOf<TaskProvider<RibbonizerTask>>()

        androidComponents.beforeVariants { variant ->
           if ((!variant.debuggable) &&
               (!extension.forcedVariantsNames.contains(variant.name))
           ) {
               project.logger.info("[ribbonizer] skip ${variant.name} because it is not debuggable and not forced.")
               return@beforeVariants
           }

            var filterBuilders = extension.filterBuilders
            if (filterBuilders.isEmpty()) {
                filterBuilders = listOf(GreenRibbonBuilder() as FilterBuilder)
            }

            val generatedResDir = getGeneratedResDir(project, variant)
            val name = "${RibbonizerTask.NAME}${capitalize(variant.name)}"
            val task = project.tasks.register(name, RibbonizerTask::class.java) {
                it.variant = variant
                it.outputDir = generatedResDir
                it.iconNames = HashSet(extension.iconNames)
                it.filterBuilders = filterBuilders
            }
            tasks.add(task)

            val generatedResources =
                project.getTasksByName("generate${capitalize(variant.name)}Resources", false)
            generatedResources.forEach {
                it.dependsOn(task)
            }
        }
        project.task(mapOf("dependsOn" to tasks), RibbonizerTask.NAME)
    }
}

fun capitalize(string: String): String {
    return string.substring(0, 1).uppercase(Locale.ROOT) + string.substring(1)
}

fun getGeneratedResDir(project: Project, variant: ApplicationVariantBuilder): File {
    return File(project.buildDir, "generated/ribbonizer/res/${variant.name}")
}